# -*- coding: utf-8 -*-
"""renewable_energy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g-dCOcLfkyl0WoWTbKzoTa89qUi-XFZ4
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import StandardScaler
import numpy as np

# Load the dataset
url = "/content/Renewable.csv"
df = pd.read_csv(url)

# Count the number of NaNs in each column
missing_sections = df.isnull().sum()
print("Number of sections with missing values:")
print(missing_sections)

# Drop rows with missing values
df_cleaned = df.dropna()

# Print the shape of the cleaned DataFrame to see how many rows were removed
print("Shape of cleaned DataFrame:", df_cleaned.shape)

# Data Preprocessing
# Assuming all features are numerical

# Splitting Data
X = df_cleaned.drop(columns=['Time', 'Energy delta[Wh]'])  # Features
y = df_cleaned['Energy delta[Wh]']  # Target variable

print("Feature columns used for training:", X.columns)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalize or scale numerical features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Model Selection
model = RandomForestRegressor(n_estimators=100, random_state=42)

# Model Training
model.fit(X_train_scaled, y_train)

# Model Evaluation
y_pred = model.predict(X_test_scaled)
mae = mean_absolute_error(y_test, y_pred)
print("Mean Absolute Error:", mae)

# Fine-Tuning
# This example doesn't include hyperparameter tuning, but you can use techniques like GridSearchCV for that.

# Example code for hyperparameter tuning (commented out)
# from sklearn.model_selection import GridSearchCV

# param_grid = {
#     'n_estimators': [50, 100, 200],
#     'max_depth': [None, 10, 20, 30],
#     'min_samples_split': [2, 5, 10],
#     'min_samples_leaf': [1, 2, 4]
# }

# grid_search = GridSearchCV(estimator=model, param_grid=param_grid, cv=3, n_jobs=-1, verbose=2)
# grid_search.fit(X_train_scaled, y_train)
# best_model = grid_search.best_estimator_
# print("Best parameters found: ", grid_search.best_params_)

# Prediction
# Example new data (replace with actual new data)
x_value = [0, 0.0, 1.6, 1021, 100, 4.9, 0.0, 0.0, 100, 0, 0, 450.0, 0.0, 4.0, 0.0]  # Ensure this matches the training feature columns

# Convert list to numpy array and scale numerical features
x_value_array = np.array(x_value).reshape(1, -1)
x_scaled = scaler.transform(x_value_array)  # Assuming you've already defined scaler during training

# Model Prediction
predicted_y = model.predict(x_scaled)[0]

print("Predicted y:", predicted_y)